  requirements.txt  scikit-learn
numpy
pandas
matplotlib
seaborn
imblearn




----------  utils/preprocess.py  ---------------
import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split

def preprocess_data(filepath):
    df = pd.read_csv(filepath)
    df.dropna(inplace=True)
    
    # Encode categorical features
    label_cols = ['Gender', 'State', 'City', 'Account_Type', 'Transaction_Type', 'Transaction_Device', 'Device_Type', 'Merchant_Category']
    df[label_cols] = df[label_cols].apply(LabelEncoder().fit_transform)
    
    # Drop unneeded columns
    df.drop(['Customer_ID', 'Customer_Name', 'Customer_Email', 'Customer_Contact', 'Transaction_ID', 'Transaction_Description'], axis=1, inplace=True)

    X = df.drop('Is_Fraud', axis=1)
    y = df['Is_Fraud']

    # Scaling
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    # Handle class imbalance
    smote = SMOTE()
    X_bal, y_bal = smote.fit_resample(X_scaled, y)

    return train_test_split(X_bal, y_bal, test_size=0.2, random_state=42)


 ------------- models/*.py  -----------------

from sklearn.linear_model import LogisticRegression

def train_logistic(X_train, y_train):
    model = LogisticRegression()
    model.fit(X_train, y_train)
    return model


{Repeat for:
knn.py â†’ KNeighborsClassifier()
svm.py â†’ SVC(probability=True)
decision_tree.py â†’ DecisionTreeClassifier()
mlp.py â†’ MLPClassifier(hidden_layer_sizes=(64, 32), max_iter=300)
isolation_forest.py â†’ IsolationForest(contamination=0.05)}



 -------- utils/evaluate.py  -----------
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score

def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
    print("\nClassification Report:\n", classification_report(y_test, y_pred))
    print("ROC AUC Score:", roc_auc_score(y_test, y_pred))



  ---------utils/visualize.py -------- 
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix

def plot_confusion(y_true, y_pred, title='Confusion Matrix'):
    cm = confusion_matrix(y_true, y_pred)
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title(title)
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.show()


  --------utils/alert.py---------  
def trigger_alert(prediction):
    if prediction == 1:
        print("ðŸš¨ Fraudulent transaction detected! Alert triggered.")
    else:
        print("âœ… Transaction is legitimate.")


 ----------- main.py ------------
from utils.preprocess import preprocess_data
from utils.evaluate import evaluate_model
from utils.alert import trigger_alert
from models.logistic_regression import train_logistic
# from models.knn import train_knn, etc.

def main():
    X_train, X_test, y_train, y_test = preprocess_data("data/transactions.csv")
    
    print("Training Logistic Regression Model...")
    model = train_logistic(X_train, y_train)
    evaluate_model(model, X_test, y_test)

    # Example prediction
    sample = X_test[0].reshape(1, -1)
    pred = model.predict(sample)[0]
    trigger_alert(pred)

if __name__ == "__main__":
    main()



